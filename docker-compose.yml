services:
  webapi:
    build:
      context: .
      dockerfile: Src/Presentation/Template.WebApi/Dockerfile
    container_name: my_dotnet_app
    depends_on:
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB_NAME};SearchPath=public
      - ConnectionStrings__IdentityConnection=Host=db;Port=5432;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_IDENTITY_DB_NAME};SearchPath=public
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetcore.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${ASPNETCORE_CERTIFICATE_PASSWORD}
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Port=${RABBITMQ_PORT}
      - RabbitMQ__Username=${RABBITMQ_DEFAULT_USER}
      - RabbitMQ__Password=${RABBITMQ_DEFAULT_PASS}
    networks:
      - nw

  db:
    image: postgres:16
    container_name: my_postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - nw

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.4
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - v01:/usr/share/elasticsearch/data
    networks:
      - nw
    healthcheck: 
      test: ["CMD", "curl", "-f", "http://elasticsearch:9200"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.17.4
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - nw

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:latest
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    configs:
      - source: rabbitmq-plugins
        target: /etc/rabbitmq/enabled_plugins
    volumes:
      - rabbitmq-lib:/var/lib/rabbitmq/
      - rabbitmq-log:/var/log/rabbitmq
    networks:
      - nw
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    networks:
      - nw
    volumes:
      - redis-volume-data:/data
    command:
      - --requirepass ${REDIS_PASSWORD}

  redis-insight:
    image: redislabs/redisinsight:1.14.0
    container_name: redis-insight
    restart: always
    depends_on:
      - redis
      - redis-graph
      - redis-search
      - redis-timeseries
    networks:
      - nw
    volumes:
      - redis-insight-volume_data:/db

  redis-graph:
    image: redislabs/redisgraph
    restart: always
    networks:
      - nw

  redis-search:
    image: redislabs/redisearch:latest
    restart: always
    networks:
      - nw

  redis-timeseries:
    image: redislabs/redistimeseries
    restart: always
    networks:
      - nw

volumes:
  postgres-data:
  v01:
  rabbitmq-lib:
  rabbitmq-log:
  redis-volume-data:
  redis-insight-volume_data:

configs:
  rabbitmq-plugins:
    content: "[rabbitmq_management]."

networks:
  nw: